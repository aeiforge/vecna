name: Draft Release

on:
  workflow_run:
    workflows: [ "CI" ]
    types:
      - completed

permissions:
  actions: read

jobs:
  check-commit-message:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.set-output.outputs.skip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Check commit message
        id: check_message
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ ^bump\([0-9]+\.[0-9]+\.[0-9]+\): ]]; then
            echo "Commit message matches the ignore pattern."
            echo "::set-output name=skip::true"
          else
            echo "Commit message: ${{ github.event.head_commit.message }}"
            echo "::set-output name=skip::false"
          fi
  create-tag:
    needs: check-commit-message
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.ref == 'refs/heads/main' &&
      needs.check-commit-message.outputs.skip != 'true'
    outputs:
      tag: ${{ steps.tag_version.outputs.new_tag }}
    name: Create Tag
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          dry_run: true
          default_bump: patch
  delete-draft:
    needs: create-tag
    name: Delete Draft Release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Get matching tags and delete draft releases
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          VERSION: ${{ needs.create-tag.outputs.tag }}
        run: |
          # Fetch all tags that match the specified version
          matching_tags=$(gh release list --json tagName --jq '.[] | select(.tagName | startswith("'"$VERSION"'")) | .tagName')

          # Loop through each matching tag
          for tag in $matching_tags; do
            # Check if the release is a draft
            if gh release view $tag --json 'draft' | jq -e '.draft' > /dev/null; then
              echo "Deleting draft release with tag $tag..."
              gh release delete $tag -y
            fi
          done

  draft-release:
    needs: [create-tag, delete-draft]
    name: Draft Release
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    permissions:
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Configure Git user
        run: |
          git config --global user.name "Aeiforge Administrator"
          git config --global user.email "administrator@aeiforge.com"
          git config --global user.username "aeiforge-administrator"
          git pull origin main

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Cache node_modules dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
            ${{ runner.os }}-

      - name: Install dependencies
        run: pnpm i

      - name: Nx Report
        run: pnpm exec nx report

      - name: Create a GitHub release using NX
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: pnpm run release --version=${{ needs.create-tag.outputs.tag }}

      - name: Push to GitHub
        run: git push
